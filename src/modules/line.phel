(ns cellular-automaton\modules\line
  (:require phel\str)
  (:require cellular-automaton\modules\rule))

(defstruct Line [cells])

(defn create-line [width]
  (Line (values (php/array_fill 0 width 0))))

(defn setup-center [l]
  (Line (put (l :cells) (php/intval (/ (count (l :cells)) 2)) 1)))

(defn setup-random [l]
  (let [cells (for [n :range [1 (count (l :cells))]]
                (php/rand 0 1))]
    (Line cells)))

(defn condition-value [l n]
  (let [previouse ((l :cells) (dec n))
        current ((l :cells) n)
        next ((l :cells) (inc n))]
    (php/bindec (format "%d%d%d" previouse current next))))

(defn- current-value [l index]
  (php/bindec
    (format
      "%d%d%d"
      (or (get-in l [:cells (dec index)]) "0")
      (get-in l [:cells index])
      (or (get-in l [:cells (inc index)]) "0"))))

(defn next-line [l r]
  (Line (map-indexed |(rule/next-value r (current-value l $1))
                     (l :cells))))

(defn expression [l]
  (str/join "" (map |(if (= $ 1) "#" " ") (l :cells))))
