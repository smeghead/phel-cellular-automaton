(ns cellular-automaton\test\modules\rule-test
  (:require cellular-automaton\modules\rule)
  (:require phel\test :refer [deftest is]))

(deftest test-rule
  (let [r (rule/Rule 30)]
    (is (= 0 (rule/next-value r 0)))
    (is (= 1 (rule/next-value r 1)))
    (is (= 1 (rule/next-value r 2)))
    (is (= 1 (rule/next-value r 3)))
    (is (= 1 (rule/next-value r 4)))
    (is (= 0 (rule/next-value r 5)))
    (is (= 0 (rule/next-value r 6)))
    (is (= 0 (rule/next-value r 7)))))



